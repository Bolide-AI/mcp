{
    "items": [
        {
            "slug": "NOTION_ADD_PAGE_CONTENT",
            "name": "Add content to Notion page",
            "description": "Appends a single content block to a notion page or a parent block (must be page, toggle, to-do, bulleted/numbered list, callout, or quote); invoke repeatedly to add multiple blocks.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "after": {
                        "default": null,
                        "description": "Identifier of an existing block. The new content block will be appended immediately after this block. If omitted or null, the new block is appended to the end of the parent's children list.",
                        "examples": [
                            "4b5f6e87-123a-456b-789c-9de8f7a9e4c0"
                        ],
                        "nullable": true,
                        "title": "After",
                        "type": "string"
                    },
                    "content_block": {
                        "description": "Include these fields in the json: {'content': 'Some words', 'link': 'https://random-link.com'. For content styling, refer to https://developers.notion.com/reference/rich-text.",
                        "examples": [
                            {
                                "block_property": "paragraph",
                                "content": "This is a paragraph added via API."
                            },
                            {
                                "paragraph": {
                                    "rich_text": [
                                        {
                                            "text": {
                                                "content": "Full block schema example."
                                            },
                                            "type": "text"
                                        }
                                    ]
                                },
                                "type": "paragraph"
                            }
                        ],
                        "nullable": true,
                        "properties": {
                            "block_property": {
                                "default": "paragraph",
                                "description": "The block property of the block to be added. Possible properties are `paragraph`, `heading_1`, `heading_2`, `heading_3`, `callout`, `to_do`, `toggle`, `quote`, `bulleted_list_item`, `numbered_list_item`. Other properties possible are `file`, `image`, `video` (link required).",
                                "enum": [
                                    "paragraph",
                                    "heading_1",
                                    "heading_2",
                                    "heading_3",
                                    "callout",
                                    "to_do",
                                    "toggle",
                                    "quote",
                                    "bulleted_list_item",
                                    "numbered_list_item",
                                    "file",
                                    "image",
                                    "video"
                                ],
                                "examples": [
                                    "paragraph",
                                    "heading_1",
                                    "heading_2",
                                    "heading_3",
                                    "bulleted_list_item",
                                    "numbered_list_item",
                                    "to_do",
                                    "callout",
                                    "toggle",
                                    "quote"
                                ],
                                "title": "Block Property",
                                "type": "string"
                            },
                            "bold": {
                                "default": false,
                                "description": "Indicates if the text is bold.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Bold",
                                "type": "boolean"
                            },
                            "code": {
                                "default": false,
                                "description": "Indicates if the text is formatted as code.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Code",
                                "type": "boolean"
                            },
                            "color": {
                                "default": "default",
                                "description": "The color of the text background or text itself.",
                                "examples": [
                                    "blue_background",
                                    "yellow_background",
                                    "gray",
                                    "purple"
                                ],
                                "title": "Color",
                                "type": "string"
                            },
                            "content": {
                                "default": null,
                                "description": "The textual content of the rich text object. Required for paragraph, heading_1, heading_2, heading_3, callout, to_do, toggle, quote.",
                                "examples": [
                                    "Hello World",
                                    "This is a heading",
                                    "This is a paragraph"
                                ],
                                "nullable": true,
                                "title": "Content",
                                "type": "string"
                            },
                            "italic": {
                                "default": false,
                                "description": "Indicates if the text is italic.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Italic",
                                "type": "boolean"
                            },
                            "link": {
                                "default": null,
                                "description": "The URL of the rich text object or the file to be uploaded or image/video link",
                                "examples": [
                                    "https://www.google.com"
                                ],
                                "nullable": true,
                                "title": "Link",
                                "type": "string"
                            },
                            "strikethrough": {
                                "default": false,
                                "description": "Indicates if the text has strikethrough.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Strikethrough",
                                "type": "boolean"
                            },
                            "underline": {
                                "default": false,
                                "description": "Indicates if the text is underlined.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Underline",
                                "type": "boolean"
                            }
                        },
                        "title": "NotionRichText",
                        "type": "object"
                    },
                    "parent_block_id": {
                        "description": "Identifier of the parent page or block to which the new content block will be added. This parent must be capable of having child blocks. Obtain valid IDs using other Notion actions or API calls.",
                        "examples": [
                            "4b5f6e87-123a-456b-789c-9de8f7a9e4c1"
                        ],
                        "title": "Parent Block Id",
                        "type": "string"
                    }
                },
                "required": [
                    "parent_block_id",
                    "content_block"
                ],
                "title": "AddPageContentRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "has_more": {
                                "description": "Indicates whether there are more results for pagination. Usually false when appending a single block with this action.",
                                "title": "Has More",
                                "type": "boolean"
                            },
                            "next_cursor": {
                                "default": null,
                                "description": "An optional cursor for pagination if the list of children is long. Usually null when appending a single block with this action.",
                                "nullable": true,
                                "title": "Next Cursor",
                                "type": "string"
                            },
                            "object": {
                                "description": "The type of object returned by the API, typically 'list'.",
                                "title": "Object",
                                "type": "string"
                            },
                            "results": {
                                "description": "A list of block objects that were added as children. For this action, it will typically contain the single newly added block object.",
                                "items": {
                                    "type": "object"
                                },
                                "title": "Results",
                                "type": "array"
                            }
                        },
                        "required": [
                            "object",
                            "results",
                            "has_more"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "AddPageContentResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "Insert content"
            ],
            "tags": [
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Add content to Notion page",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_CREATE_COMMENT",
            "name": "Create comment",
            "description": "Adds a comment to a notion page (via `parent page id`) or to an existing discussion thread (via `discussion id`); cannot create new discussion threads on specific blocks (inline comments).",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "comment": {
                        "description": "Content of the comment as a NotionRichText object. Simplest form: {'content': 'Looks good!'} (optional styling fields: bold, italic, link, etc.). Do NOT wrap this in a list or use Notion API block JSON.",
                        "examples": [
                            {
                                "content": "Looks good to me!"
                            },
                            {
                                "bold": true,
                                "content": "Fix typo"
                            }
                        ],
                        "properties": {
                            "block_property": {
                                "default": "paragraph",
                                "description": "The block property of the block to be added. Possible properties are `paragraph`, `heading_1`, `heading_2`, `heading_3`, `callout`, `to_do`, `toggle`, `quote`, `bulleted_list_item`, `numbered_list_item`. Other properties possible are `file`, `image`, `video` (link required).",
                                "enum": [
                                    "paragraph",
                                    "heading_1",
                                    "heading_2",
                                    "heading_3",
                                    "callout",
                                    "to_do",
                                    "toggle",
                                    "quote",
                                    "bulleted_list_item",
                                    "numbered_list_item",
                                    "file",
                                    "image",
                                    "video"
                                ],
                                "examples": [
                                    "paragraph",
                                    "heading_1",
                                    "heading_2",
                                    "heading_3",
                                    "bulleted_list_item",
                                    "numbered_list_item",
                                    "to_do",
                                    "callout",
                                    "toggle",
                                    "quote"
                                ],
                                "title": "Block Property",
                                "type": "string"
                            },
                            "bold": {
                                "default": false,
                                "description": "Indicates if the text is bold.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Bold",
                                "type": "boolean"
                            },
                            "code": {
                                "default": false,
                                "description": "Indicates if the text is formatted as code.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Code",
                                "type": "boolean"
                            },
                            "color": {
                                "default": "default",
                                "description": "The color of the text background or text itself.",
                                "examples": [
                                    "blue_background",
                                    "yellow_background",
                                    "gray",
                                    "purple"
                                ],
                                "title": "Color",
                                "type": "string"
                            },
                            "content": {
                                "default": null,
                                "description": "The textual content of the rich text object. Required for paragraph, heading_1, heading_2, heading_3, callout, to_do, toggle, quote.",
                                "examples": [
                                    "Hello World",
                                    "This is a heading",
                                    "This is a paragraph"
                                ],
                                "nullable": true,
                                "title": "Content",
                                "type": "string"
                            },
                            "italic": {
                                "default": false,
                                "description": "Indicates if the text is italic.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Italic",
                                "type": "boolean"
                            },
                            "link": {
                                "default": null,
                                "description": "The URL of the rich text object or the file to be uploaded or image/video link",
                                "examples": [
                                    "https://www.google.com"
                                ],
                                "nullable": true,
                                "title": "Link",
                                "type": "string"
                            },
                            "strikethrough": {
                                "default": false,
                                "description": "Indicates if the text has strikethrough.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Strikethrough",
                                "type": "boolean"
                            },
                            "underline": {
                                "default": false,
                                "description": "Indicates if the text is underlined.",
                                "examples": [
                                    true,
                                    false
                                ],
                                "title": "Underline",
                                "type": "boolean"
                            }
                        },
                        "title": "Comment",
                        "type": "object"
                    },
                    "discussion_id": {
                        "default": null,
                        "description": "The ID of an existing discussion thread to which the comment will be added. This is required if `parent_page_id` is not provided.",
                        "examples": [
                            "yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy"
                        ],
                        "title": "Discussion Id",
                        "type": "string"
                    },
                    "parent_page_id": {
                        "default": null,
                        "description": "The ID of the Notion page where the comment will be added. This is required if `discussion_id` is not provided. Page IDs can be obtained using other Notion actions that fetch page details or list pages.",
                        "examples": [
                            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                        ],
                        "title": "Parent Page Id",
                        "type": "string"
                    }
                },
                "required": [
                    "comment"
                ],
                "title": "CreateCommentRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "A dictionary containing the full JSON response from the Notion API, which includes the details of the newly created comment object.",
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "CreateCommentResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "comment:write"
            ],
            "tags": [
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Create comment",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_CREATE_DATABASE",
            "name": "Create Notion Database",
            "description": "Creates a new notion database as a subpage under a specified parent page with a defined properties schema; use this action exclusively for creating new databases.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "parent_id": {
                        "description": "Identifier of the existing Notion page that will contain the new database. This ID must be a valid UUID corresponding to a page within the Notion workspace. It can often be obtained using search functionalities or the `NOTION_FETCH_DATA` action.",
                        "examples": [
                            "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                        ],
                        "title": "Parent Id",
                        "type": "string"
                    },
                    "properties": {
                        "description": "A list defining the schema (columns) for the new database. Each item in the list is an object representing a property and must specify at least its 'name' (how it will appear in Notion) and 'type' (the kind of data it will hold). Refer to the `PropertySchema` model for full structure details. At least one property of type 'title' is generally required. Common supported property types include: 'title', 'rich_text', 'number', 'select', 'multi_select', 'status', 'date', 'people', 'files', 'checkbox', 'url', 'email', 'phone_number'. Other types like 'formula', 'relation', 'rollup', 'created_time', 'created_by', 'last_edited_time', 'last_edited_by' might also be supported.",
                        "examples": [
                            "[{\"name\": \"Task Name\", \"type\": \"title\"}, {\"name\": \"Due Date\", \"type\": \"date\"}]",
                            "[{\"name\": \"Feature\", \"type\": \"title\"}, {\"name\": \"Status\", \"type\": \"select\"}, {\"name\": \"Assignee\", \"type\": \"people\"}, {\"name\": \"Details\", \"type\": \"rich_text\"}]"
                        ],
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Name of the property",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "The type of the property, which determines the kind of data it will store. Valid types are defined by the PropertyType enum.",
                                    "enum": [
                                        "title",
                                        "rich_text",
                                        "number",
                                        "select",
                                        "multi_select",
                                        "date",
                                        "people",
                                        "files",
                                        "checkbox",
                                        "url",
                                        "email",
                                        "phone_number",
                                        "formula",
                                        "relation",
                                        "rollup",
                                        "status",
                                        "created_time",
                                        "created_by",
                                        "last_edited_time",
                                        "last_edited_by"
                                    ],
                                    "title": "PropertyType",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "type"
                            ],
                            "title": "PropertySchema",
                            "type": "object"
                        },
                        "title": "Properties",
                        "type": "array"
                    },
                    "title": {
                        "description": "The desired title for the new database. This text will be automatically converted into Notion's rich text format when the database is created.",
                        "examples": [
                            "Project Roadmap",
                            "Q3 Content Calendar"
                        ],
                        "title": "Title",
                        "type": "string"
                    }
                },
                "required": [
                    "parent_id",
                    "title",
                    "properties"
                ],
                "title": "CreateDatabaseRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "archived": {
                                "description": "Archived status.",
                                "title": "Archived",
                                "type": "boolean"
                            },
                            "cover": {
                                "default": null,
                                "description": "Database cover image.",
                                "nullable": true,
                                "title": "Cover",
                                "type": "object"
                            },
                            "created_by": {
                                "default": null,
                                "description": "User who created the database.",
                                "nullable": true,
                                "title": "Created By",
                                "type": "object"
                            },
                            "created_time": {
                                "description": "Database creation time (ISO 8601 format).",
                                "title": "Created Time",
                                "type": "string"
                            },
                            "description": {
                                "default": null,
                                "description": "Database description.",
                                "items": {
                                    "type": "object"
                                },
                                "nullable": true,
                                "title": "Description",
                                "type": "array"
                            },
                            "icon": {
                                "default": null,
                                "description": "Database icon (emoji or file).",
                                "nullable": true,
                                "title": "Icon",
                                "type": "object"
                            },
                            "id": {
                                "description": "Unique identifier for the database.",
                                "title": "Id",
                                "type": "string"
                            },
                            "is_inline": {
                                "default": null,
                                "description": "Whether the database is inline or not.",
                                "nullable": true,
                                "title": "Is Inline",
                                "type": "boolean"
                            },
                            "last_edited_by": {
                                "default": null,
                                "description": "User who last edited the database.",
                                "nullable": true,
                                "title": "Last Edited By",
                                "type": "object"
                            },
                            "last_edited_time": {
                                "description": "Last edited time (ISO 8601 format).",
                                "title": "Last Edited Time",
                                "type": "string"
                            },
                            "object": {
                                "description": "Always 'database'.",
                                "title": "Object",
                                "type": "string"
                            },
                            "parent": {
                                "description": "Parent information.",
                                "title": "Parent",
                                "type": "object"
                            },
                            "properties": {
                                "description": "Properties of the database.",
                                "title": "Properties",
                                "type": "object"
                            },
                            "title": {
                                "description": "Database title as a list of rich text objects.",
                                "items": {
                                    "type": "object"
                                },
                                "title": "Title",
                                "type": "array"
                            },
                            "url": {
                                "description": "URL of the database.",
                                "title": "Url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "object",
                            "id",
                            "created_time",
                            "last_edited_time",
                            "title",
                            "properties",
                            "parent",
                            "url",
                            "archived"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "CreateDatabaseResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Create Notion Database",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_CREATE_NOTION_PAGE",
            "name": "Create Notion page",
            "description": "Creates a new empty page in a notion workspace.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "cover": {
                        "default": null,
                        "description": "The URL of an image to be used as the cover for the new page. The URL must be publicly accessible.",
                        "examples": [
                            "https://www.example.com/images/cover.png"
                        ],
                        "pattern": "^https?://.+",
                        "title": "Cover",
                        "type": "string"
                    },
                    "icon": {
                        "default": null,
                        "description": "An emoji to be used as the icon for the new page. Must be a single emoji character.",
                        "examples": [
                            "😻",
                            "🤔",
                            "📄"
                        ],
                        "pattern": "[\\U0001F300-\\U0001F9FF]|[\\u2600-\\u26FF\\u2700-\\u27BF]",
                        "title": "Icon",
                        "type": "string"
                    },
                    "parent_id": {
                        "description": "The UUID of the parent page or database under which the new page will be created. This ID must correspond to an existing page or database in the Notion workspace. Use other Notion actions (e.g., for searching or fetching data) to obtain valid parent IDs.",
                        "examples": [
                            "59833787-2cf9-4fdf-8782-e53db20768a5"
                        ],
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                        "title": "Parent Id",
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the new page to be created.",
                        "examples": [
                            "My new report",
                            "Project Plan Q3"
                        ],
                        "title": "Title",
                        "type": "string"
                    }
                },
                "required": [
                    "parent_id",
                    "title"
                ],
                "title": "CreateNotionPageRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "A dictionary representing the newly created page object, including its ID, parent information, creation time, last edited time, and properties, as returned by the Notion API.",
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "CreateNotionPageResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "insert_content"
            ],
            "tags": [
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Create Notion page",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_DELETE_BLOCK",
            "name": "Delete a block",
            "description": "Archives a notion block, page, or database using its id, which sets its 'archived' property to true (like moving to \"trash\" in the ui) and allows it to be restored later.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "block_id": {
                        "description": "Identifier of the block, page, or database to be deleted (archived). To find page IDs and their titles, consider using an action like `NOTION_FETCH_DATA`.",
                        "examples": [
                            "59833787-2cf9-4fdf-8782-e53db20768a5"
                        ],
                        "title": "Block Id",
                        "type": "string"
                    }
                },
                "required": [
                    "block_id"
                ],
                "title": "DeleteBlockRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "A dictionary representing the block object that was successfully archived. This object includes an 'archived': true key-value pair, confirming the deletion.",
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "DeleteBlockResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "Read content",
                "Update content",
                "Insert content"
            ],
            "tags": [
                "destructiveHint",
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Delete a block",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_FETCH_COMMENTS",
            "name": "Fetch comments",
            "description": "Fetches unresolved comments for a specified notion block or page id.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "block_id": {
                        "description": "Identifier for a Notion block or page from which to fetch comments. To find page IDs, use the `NOTION_FETCH_DATA` action to list available pages and their corresponding IDs.",
                        "examples": [
                            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                        ],
                        "title": "Block Id",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The number of comments to return in a single response page. Must be between 1 and 100, inclusive. Default is 100.",
                        "maximum": 100,
                        "minimum": 1,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "start_cursor": {
                        "default": null,
                        "description": "A pagination cursor. If provided, the response will contain the page of results starting after this cursor. If omitted, the first page of results is returned.",
                        "title": "Start Cursor",
                        "type": "string"
                    }
                },
                "required": [
                    "block_id"
                ],
                "title": "FetchCommentsRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "has_more": {
                                "default": false,
                                "description": "A boolean indicating whether more pages of comments are available to be fetched. `true` if more comments exist, `false` otherwise.",
                                "title": "Has More",
                                "type": "boolean"
                            },
                            "next_cursor": {
                                "default": null,
                                "description": "A cursor for pagination. If more comments are available, this field contains the cursor to use in a subsequent request to fetch the next page. `null` if no more comments are available.",
                                "title": "Next Cursor",
                                "type": "string"
                            },
                            "object": {
                                "description": "Indicates the type of the response object, typically 'list'.",
                                "title": "Object",
                                "type": "string"
                            },
                            "results": {
                                "default": [],
                                "description": "A list of comment objects retrieved from the specified block or page.",
                                "items": {
                                    "type": "object"
                                },
                                "title": "Results",
                                "type": "array"
                            },
                            "type": {
                                "default": "comment",
                                "description": "The type of objects contained within the `results` list, which will be 'comment' for this endpoint.",
                                "title": "Type",
                                "type": "string"
                            }
                        },
                        "required": [
                            "object"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "FetchCommentsResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Fetch comments",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_FETCH_DATA",
            "name": "Fetch Notion Data",
            "description": "Fetches notion items (pages and/or databases) from the notion workspace, always call this action to get page id or database id in the simplest way",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "description": "Defines the parameters for fetching data (pages and/or databases) from Notion.\nExactly one of `get_pages`, `get_databases`, or `get_all` must be set to true to specify the type of data to retrieve.",
                "properties": {
                    "get_all": {
                        "default": false,
                        "description": "If true, fetches both pages and databases accessible to the Notion integration. Only one of `get_pages`, `get_databases`, or `get_all` can be true.",
                        "title": "Get All",
                        "type": "boolean"
                    },
                    "get_databases": {
                        "default": false,
                        "description": "If true, fetches all databases accessible to the Notion integration. Only one of `get_pages`, `get_databases`, or `get_all` can be true.",
                        "title": "Get Databases",
                        "type": "boolean"
                    },
                    "get_pages": {
                        "default": false,
                        "description": "If true, fetches all pages accessible to the Notion integration. Only one of `get_pages`, `get_databases`, or `get_all` can be true.",
                        "title": "Get Pages",
                        "type": "boolean"
                    },
                    "page_size": {
                        "default": 100,
                        "description": "The maximum number of items to retrieve. Must be between 1 and 100, inclusive. Defaults to 100. Note: this action currently only fetches the first page of results, so `page_size` effectively sets the maximum number of items returned.",
                        "maximum": 100,
                        "minimum": 1,
                        "nullable": true,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "query": {
                        "default": null,
                        "description": "An optional search query to filter pages and/or databases by their title or content. If not provided (None or empty string), all accessible items matching the selected type (pages, databases, or both) are returned.",
                        "examples": [
                            "Quarterly Report",
                            "User Research Notes"
                        ],
                        "nullable": true,
                        "title": "Query",
                        "type": "string"
                    }
                },
                "title": "FetchDataRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "values": {
                                "description": "A list of dictionaries, where each dictionary represents a fetched Notion item and includes its 'id', 'title', and 'type' (which will be 'page' or 'database').",
                                "items": {
                                    "type": "object"
                                },
                                "title": "Values",
                                "type": "array"
                            }
                        },
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "FetchDataResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "read"
            ],
            "tags": [
                "Data",
                "Utility",
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Fetch Notion Data",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_FETCH_DATABASE",
            "name": "Fetch Database",
            "description": "Fetches a notion database's structural metadata (properties, title, etc.) via its `database id`, not the data entries; `database id` must reference an existing database.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "database_id": {
                        "description": "The unique identifier of the Notion database whose metadata (structure, properties) is to be retrieved. To obtain a list of `database_id` values and corresponding database titles, use the 'NOTION_FETCH_DATA' action (or a similar action designed for listing/discovering databases). Note: Linked databases are not supported; the ID must reference an actual database, not a linked database.",
                        "examples": [
                            "04dc3f00-2fdd-4d83-99d1-4f9a1c43ce6f"
                        ],
                        "minLength": 1,
                        "title": "Database Id",
                        "type": "string"
                    }
                },
                "required": [
                    "database_id"
                ],
                "title": "FetchDatabaseRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "archived": {
                                "title": "Archived",
                                "type": "boolean"
                            },
                            "cover": {
                                "default": null,
                                "nullable": true,
                                "title": "Cover",
                                "type": "object"
                            },
                            "created_time": {
                                "title": "Created Time",
                                "type": "string"
                            },
                            "description": {
                                "items": {
                                    "properties": {
                                        "annotations": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Annotations"
                                        },
                                        "href": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Href"
                                        },
                                        "plain_text": {
                                            "title": "Plain Text",
                                            "type": "string"
                                        },
                                        "text": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Text"
                                        },
                                        "type": {
                                            "title": "Type",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type",
                                        "plain_text"
                                    ],
                                    "title": "RichTextObject",
                                    "type": "object"
                                },
                                "title": "Description",
                                "type": "array"
                            },
                            "icon": {
                                "default": null,
                                "nullable": true,
                                "title": "Icon",
                                "type": "object"
                            },
                            "id": {
                                "title": "Id",
                                "type": "string"
                            },
                            "is_inline": {
                                "title": "Is Inline",
                                "type": "boolean"
                            },
                            "last_edited_time": {
                                "title": "Last Edited Time",
                                "type": "string"
                            },
                            "object": {
                                "default": "database",
                                "title": "Object",
                                "type": "string"
                            },
                            "parent": {
                                "title": "Parent",
                                "type": "object"
                            },
                            "properties": {
                                "additionalProperties": {
                                    "properties": {
                                        "checkbox": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Checkbox"
                                        },
                                        "created_by": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Created By"
                                        },
                                        "created_time": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Created Time"
                                        },
                                        "date": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Date"
                                        },
                                        "email": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Email"
                                        },
                                        "files": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Files"
                                        },
                                        "formula": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Formula"
                                        },
                                        "id": {
                                            "title": "Id",
                                            "type": "string"
                                        },
                                        "last_edited_by": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Last Edited By"
                                        },
                                        "last_edited_time": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Last Edited Time"
                                        },
                                        "multi_select": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Multi Select"
                                        },
                                        "name": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Name"
                                        },
                                        "number": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Number"
                                        },
                                        "people": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "People"
                                        },
                                        "phone_number": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Phone Number"
                                        },
                                        "relation": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Relation"
                                        },
                                        "rich_text": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Rich Text"
                                        },
                                        "rollup": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Rollup"
                                        },
                                        "select": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Select"
                                        },
                                        "status": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Status"
                                        },
                                        "title": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Title"
                                        },
                                        "type": {
                                            "title": "Type",
                                            "type": "string"
                                        },
                                        "url": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Url"
                                        }
                                    },
                                    "required": [
                                        "id",
                                        "type"
                                    ],
                                    "title": "NotionPropertySchemaItem",
                                    "type": "object"
                                },
                                "title": "Properties",
                                "type": "object"
                            },
                            "request_id": {
                                "default": null,
                                "nullable": true,
                                "title": "Request Id",
                                "type": "string"
                            },
                            "title": {
                                "items": {
                                    "properties": {
                                        "annotations": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Annotations"
                                        },
                                        "href": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Href"
                                        },
                                        "plain_text": {
                                            "title": "Plain Text",
                                            "type": "string"
                                        },
                                        "text": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "title": "Text"
                                        },
                                        "type": {
                                            "title": "Type",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type",
                                        "plain_text"
                                    ],
                                    "title": "RichTextObject",
                                    "type": "object"
                                },
                                "title": "Title",
                                "type": "array"
                            },
                            "url": {
                                "title": "Url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "created_time",
                            "last_edited_time",
                            "url",
                            "title",
                            "properties",
                            "parent",
                            "archived",
                            "is_inline"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "FetchDatabaseResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Fetch Database",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_FETCH_ROW",
            "name": "Fetch database row",
            "description": "Retrieves a notion database row's properties and metadata; use a different action for page content blocks.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "page_id": {
                        "description": "The UUID of the Notion page (which represents a row in a database) to retrieve. Each row in a Notion database is a page. You can obtain `page_id` values by using an action that lists database pages (e.g., `NOTION_FETCH_DATA`) to get available page IDs and their titles.",
                        "examples": [
                            "6c6a9b6c-12a4-4c3e-98e2-3c7a1e4f2d2a"
                        ],
                        "title": "Page Id",
                        "type": "string"
                    }
                },
                "required": [
                    "page_id"
                ],
                "title": "FetchRowRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "page_data": {
                                "description": "A dictionary containing the complete data of the fetched Notion page, representing the row's content and properties.",
                                "title": "Page Data",
                                "type": "object"
                            }
                        },
                        "required": [
                            "page_data"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "FetchRowResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Fetch database row",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_GET_ABOUT_ME",
            "name": "Get About Me",
            "description": "Retrieves the user object for the bot associated with the current notion integration token, typically to obtain the bot's user id for other api operations.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {},
                "title": "GetAboutMeRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "description": "A dictionary containing the User object associated with the integration token. This object includes details like the bot's ID, name, avatar URL, and type (which will be 'bot').",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "required": [
                            "response_data"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "GetAboutMeResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Get About Me",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_GET_ABOUT_USER",
            "name": "Get about user",
            "description": "Retrieves detailed information about a specific notion user, such as their name, avatar, and email, based on their unique user id.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "user_id": {
                        "description": "The unique identifier of the Notion user whose details are to be retrieved. This ID is used to fetch specific user information.",
                        "examples": [
                            "d40e73cb-a769-4109-b8ad-14f9f4db1219"
                        ],
                        "title": "User Id",
                        "type": "string"
                    }
                },
                "required": [
                    "user_id"
                ],
                "title": "GetAboutUserRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "avatar_url": {
                                "default": null,
                                "description": "URL of the user's avatar.",
                                "nullable": true,
                                "title": "Avatar Url",
                                "type": "string"
                            },
                            "bot": {
                                "default": null,
                                "description": "Details if the user is a bot, e.g., {'owner': {...}, 'workspace_name': '...'}.",
                                "nullable": true,
                                "title": "Bot",
                                "type": "object"
                            },
                            "id": {
                                "description": "Unique identifier for the user.",
                                "title": "Id",
                                "type": "string"
                            },
                            "name": {
                                "default": null,
                                "description": "User's name.",
                                "nullable": true,
                                "title": "Name",
                                "type": "string"
                            },
                            "object": {
                                "description": "Type of object. Should be 'user' or 'bot'.",
                                "title": "Object",
                                "type": "string"
                            },
                            "person": {
                                "additionalProperties": {
                                    "type": "string"
                                },
                                "default": null,
                                "description": "Details if the user is a person, e.g., {'email': '...'}.",
                                "nullable": true,
                                "title": "Person",
                                "type": "object"
                            },
                            "type": {
                                "default": null,
                                "description": "Type of user, e.g., 'person' or 'bot'.",
                                "nullable": true,
                                "title": "Type",
                                "type": "string"
                            }
                        },
                        "required": [
                            "object",
                            "id"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "GetAboutUserResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Get about user",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_INSERT_ROW_DATABASE",
            "name": "Insert row database",
            "description": "Creates a new page (row) in a specified notion database.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "child_blocks": {
                        "default": [],
                        "description": "A list of `NotionRichText` objects defining content blocks (e.g., paragraphs, headings) to append to the new page's body. If omitted, the page body will be empty.",
                        "items": {
                            "description": "Include these fields in the json: {'content': 'Some words', 'link': 'https://random-link.com'. For content styling, refer to https://developers.notion.com/reference/rich-text.",
                            "properties": {
                                "block_property": {
                                    "default": "paragraph",
                                    "description": "The block property of the block to be added. Possible properties are `paragraph`, `heading_1`, `heading_2`, `heading_3`, `callout`, `to_do`, `toggle`, `quote`, `bulleted_list_item`, `numbered_list_item`. Other properties possible are `file`, `image`, `video` (link required).",
                                    "enum": [
                                        "paragraph",
                                        "heading_1",
                                        "heading_2",
                                        "heading_3",
                                        "callout",
                                        "to_do",
                                        "toggle",
                                        "quote",
                                        "bulleted_list_item",
                                        "numbered_list_item",
                                        "file",
                                        "image",
                                        "video"
                                    ],
                                    "examples": [
                                        "paragraph",
                                        "heading_1",
                                        "heading_2",
                                        "heading_3",
                                        "bulleted_list_item",
                                        "numbered_list_item",
                                        "to_do",
                                        "callout",
                                        "toggle",
                                        "quote"
                                    ],
                                    "title": "BlockProperty",
                                    "type": "string"
                                },
                                "bold": {
                                    "default": false,
                                    "description": "Indicates if the text is bold.",
                                    "examples": [
                                        true,
                                        false
                                    ],
                                    "title": "Bold",
                                    "type": "boolean"
                                },
                                "code": {
                                    "default": false,
                                    "description": "Indicates if the text is formatted as code.",
                                    "examples": [
                                        true,
                                        false
                                    ],
                                    "title": "Code",
                                    "type": "boolean"
                                },
                                "color": {
                                    "default": "default",
                                    "description": "The color of the text background or text itself.",
                                    "examples": [
                                        "blue_background",
                                        "yellow_background",
                                        "gray",
                                        "purple"
                                    ],
                                    "title": "Color",
                                    "type": "string"
                                },
                                "content": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "The textual content of the rich text object. Required for paragraph, heading_1, heading_2, heading_3, callout, to_do, toggle, quote.",
                                    "examples": [
                                        "Hello World",
                                        "This is a heading",
                                        "This is a paragraph"
                                    ],
                                    "title": "Content"
                                },
                                "italic": {
                                    "default": false,
                                    "description": "Indicates if the text is italic.",
                                    "examples": [
                                        true,
                                        false
                                    ],
                                    "title": "Italic",
                                    "type": "boolean"
                                },
                                "link": {
                                    "anyOf": [
                                        {
                                            "type": "string"
                                        },
                                        {
                                            "type": "null"
                                        }
                                    ],
                                    "default": null,
                                    "description": "The URL of the rich text object or the file to be uploaded or image/video link",
                                    "examples": [
                                        "https://www.google.com"
                                    ],
                                    "title": "Link"
                                },
                                "strikethrough": {
                                    "default": false,
                                    "description": "Indicates if the text has strikethrough.",
                                    "examples": [
                                        true,
                                        false
                                    ],
                                    "title": "Strikethrough",
                                    "type": "boolean"
                                },
                                "underline": {
                                    "default": false,
                                    "description": "Indicates if the text is underlined.",
                                    "examples": [
                                        true,
                                        false
                                    ],
                                    "title": "Underline",
                                    "type": "boolean"
                                }
                            },
                            "title": "NotionRichText",
                            "type": "object"
                        },
                        "title": "Child Blocks",
                        "type": "array"
                    },
                    "cover": {
                        "default": null,
                        "description": "URL of an external image to set as the page cover. The URL must point to a publicly accessible image.",
                        "examples": [
                            "https://google.com/image.png"
                        ],
                        "title": "Cover",
                        "type": "string"
                    },
                    "database_id": {
                        "description": "Identifier (UUID) of the Notion database where the new page (row) will be inserted. This ID must correspond to an existing database accessible to the integration. Use the `NOTION_FETCH_DATA` action to find available database IDs.",
                        "examples": [
                            "59833787-2cf9-4fdf-8782-e53db20768a5"
                        ],
                        "title": "Database Id",
                        "type": "string"
                    },
                    "icon": {
                        "default": null,
                        "description": "Emoji to be used as the page icon. Must be a single emoji character.",
                        "examples": [
                            "😻",
                            "🤔"
                        ],
                        "title": "Icon",
                        "type": "string"
                    },
                    "properties": {
                        "default": [],
                        "description": "Property values for the new page. IMPORTANT: This field requires a LIST of objects, not a dictionary. Each object in the list defines a property and must include: `name` (the exact name of the property as it appears in Notion), `type` (the property's data type), and `value` (the property's value, formatted as a string according to its type).\n\nCORRECT FORMAT EXAMPLE (a list of property objects):\n[\n  {\"name\": \"Title\", \"type\": \"title\", \"value\": \"My new task\"},\n  {\"name\": \"Status\", \"type\": \"select\", \"value\": \"In Progress\"},\n  {\"name\": \"Tags\", \"type\": \"multi_select\", \"value\": \"Work,Personal\"},\n  {\"name\": \"Due Date\", \"type\": \"date\", \"value\": \"2024-06-01T12:00:00.000-04:00\"},\n  {\"name\": \"Completed\", \"type\": \"checkbox\", \"value\": \"False\"}\n]\n\nINCORRECT FORMAT (e.g., a dictionary instead of a list):\n{\n  \"Title\": \"My new task\",\n  \"Status\": \"In Progress\"\n}\n\nValue formatting rules by property type:\n- `title` or `rich_text`: Plain text string (maximum 2000 characters).\n- `number`: String representation of a number (e.g., \"23.4\").\n- `select`: The name of an existing option for the select property (e.g., \"In Progress\").\n- `multi_select`: Comma-separated string of existing option names (e.g., \"Work,Personal\").\n- `date`: ISO 8601 formatted date string (e.g., \"2024-06-01T12:00:00.000-04:00\").\n- `people`: Comma-separated string of Notion user IDs.\n- `checkbox`: String \"True\" or \"False\".\n- `url`: A valid URL string.\n- `files`: Comma-separated string of URLs.\nProperties defined in the database schema but omitted from this list will be initialized with default or empty values. Ensure that property names and types correctly match the target database schema.",
                        "examples": [
                            "[{\"name\": \"Task Name\", \"type\": \"title\", \"value\": \"Finalize Q3 report\"}, {\"name\": \"Priority\", \"type\": \"select\", \"value\": \"High\"}]"
                        ],
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Name of the property",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of the property. Type of the propertytitle, rich_text, number, select, multi_select, date, people, files, checkbox url, email, phone_number, formula, created_by, created_time, last_edited_by, last_edited_time",
                                    "enum": [
                                        "title",
                                        "rich_text",
                                        "number",
                                        "select",
                                        "multi_select",
                                        "date",
                                        "people",
                                        "files",
                                        "checkbox",
                                        "url",
                                        "email",
                                        "phone_number",
                                        "formula",
                                        "relation",
                                        "rollup",
                                        "status",
                                        "created_time",
                                        "created_by",
                                        "last_edited_time",
                                        "last_edited_by"
                                    ],
                                    "title": "PropertyType",
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Value of the property, it will be dependent on the type of the property\nFor types --> value should be\n- title, rich_text - text ex. \"Hello World\" (IMPORTANT: max 2000 characters, longer text will be truncated)\n- number - number ex. 23.4\n- select - select ex. \"India\"\n- multi_select - multi_select comma separated values ex. \"India,USA\"\n- date - format ex. \"2021-05-11T11:00:00.000-04:00\",\n- people - comma separated ids of people ex. \"123,456\" (will be converted to array of user objects)\n- relation - comma separated ids of related pages ex. \"123,456\" (will be converted to array of relation objects)\n- url - a url.\n- files - comma separated urls\n- checkbox - \"True\" or \"False\"\n",
                                    "title": "Value",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "type",
                                "value"
                            ],
                            "title": "PropertyValues",
                            "type": "object"
                        },
                        "title": "Properties",
                        "type": "array"
                    }
                },
                "required": [
                    "database_id"
                ],
                "title": "InsertRowDatabaseRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "description": "Dictionary containing the complete JSON object representing the newly created page (row), as returned by the Notion API.",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "required": [
                            "response_data"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "InsertRowDatabaseResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Insert row database",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_LIST_USERS",
            "name": "List users",
            "description": "Retrieves a paginated list of users (excluding guests) from the notion workspace; the number of users returned per page may be less than the requested `page size`.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "page_size": {
                        "default": 30,
                        "description": "The desired number of users to retrieve per page. The maximum value is 100.",
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "start_cursor": {
                        "default": null,
                        "description": "An optional cursor for pagination. If provided, fetches results starting after this cursor. If omitted, retrieves the first page of users. Use the 'next_cursor' value from a previous response to get the next page.",
                        "title": "Start Cursor",
                        "type": "string"
                    }
                },
                "title": "ListUsersRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "description": "A dictionary containing a paginated list of user objects from the workspace. The dictionary structure includes: 'results' (a list of user objects), 'has_more' (a boolean indicating if more users are available), and 'next_cursor' (a string cursor for fetching the next page, if 'has_more' is true). Each user object typically contains details such as 'id', 'type' (e.g., 'person' or 'bot'), 'name', 'avatar_url', and potentially an 'email' if available and permissions allow.",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "required": [
                            "response_data"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "ListUsersResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "List users",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_QUERY_DATABASE",
            "name": "Query database",
            "description": "Queries a notion database for pages (rows), where rows are pages and columns are properties; ensure sort property names correspond to existing database properties.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "database_id": {
                        "description": "Identifier of the Notion database to query. To discover available database IDs and their corresponding titles, you can use an action like `NOTION_FETCH_DATA` or inspect the database in Notion.",
                        "title": "Database Id",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 2,
                        "description": "The maximum number of items (pages or rows) to return in a single response. Defaults to 2. The actual number of items returned may be less than this value.",
                        "examples": [
                            "10",
                            "25",
                            "100"
                        ],
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "sorts": {
                        "default": null,
                        "description": "List of sort rules. Each item must use the keys 'property_name' and 'ascending'.\nExample: [{'property_name': 'Due', 'ascending': False}]",
                        "examples": [
                            [
                                {
                                    "ascending": true,
                                    "property_name": "Priority"
                                }
                            ]
                        ],
                        "items": {
                            "properties": {
                                "ascending": {
                                    "description": "True = ASC, False = DESC.",
                                    "examples": [
                                        true
                                    ],
                                    "title": "Ascending",
                                    "type": "boolean"
                                },
                                "property_name": {
                                    "description": "Database column to sort by.",
                                    "examples": [
                                        "Task Name"
                                    ],
                                    "title": "Property Name",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "property_name",
                                "ascending"
                            ],
                            "title": "Sort",
                            "type": "object"
                        },
                        "title": "Sorts",
                        "type": "array"
                    },
                    "start_cursor": {
                        "default": null,
                        "description": "An opaque cursor for pagination, used to retrieve the next set of results. This value is obtained from the `next_cursor` field in a previous response. If omitted, retrieves results from the beginning.",
                        "examples": [
                            "abcdefgh-1234-5678-90ab-cdef12345678",
                            "some-other-cursor-value"
                        ],
                        "title": "Start Cursor",
                        "type": "string"
                    }
                },
                "required": [
                    "database_id"
                ],
                "title": "QueryDatabaseRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "default": null,
                                "description": "A dictionary containing the queried data from the Notion database. This typically includes a list of page objects (rows), each with its properties, and pagination information like `next_cursor` and `has_more`.",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "QueryDatabaseResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "databases.read"
            ],
            "tags": [
                "important",
                "openWorldHint",
                "readOnlyHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Query database",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_RETRIEVE_COMMENT",
            "name": "Retrieve Comment",
            "description": "Tool to retrieve a specific comment by its id. use when you have a comment id and need to fetch its details.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "comment_id": {
                        "description": "Identifier for the comment to retrieve.",
                        "examples": [
                            "123e4567-e89b-12d3-a456-426614174000"
                        ],
                        "title": "Comment Id",
                        "type": "string"
                    }
                },
                "required": [
                    "comment_id"
                ],
                "title": "RetrieveCommentRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "created_by": {
                                "description": "User who created the comment.",
                                "properties": {
                                    "id": {
                                        "default": null,
                                        "description": "Unique identifier for the user.",
                                        "nullable": true,
                                        "title": "Id",
                                        "type": "string"
                                    },
                                    "object": {
                                        "default": null,
                                        "description": "Type of the object, typically \"user\".",
                                        "nullable": true,
                                        "title": "Object",
                                        "type": "string"
                                    }
                                },
                                "title": "Created By",
                                "type": "object"
                            },
                            "created_time": {
                                "description": "Timestamp of when the comment was created.",
                                "title": "Created Time",
                                "type": "string"
                            },
                            "discussion_id": {
                                "description": "Identifier for the discussion the comment belongs to.",
                                "title": "Discussion Id",
                                "type": "string"
                            },
                            "id": {
                                "description": "Unique identifier for the comment.",
                                "title": "Id",
                                "type": "string"
                            },
                            "last_edited_time": {
                                "description": "Timestamp of when the comment was last edited.",
                                "title": "Last Edited Time",
                                "type": "string"
                            },
                            "object": {
                                "description": "The type of the object, typically \"comment\".",
                                "title": "Object",
                                "type": "string"
                            },
                            "parent": {
                                "description": "Information about the parent of the comment.",
                                "properties": {
                                    "block_id": {
                                        "default": null,
                                        "description": "Identifier of the parent block, if applicable.",
                                        "nullable": true,
                                        "title": "Block Id",
                                        "type": "string"
                                    },
                                    "page_id": {
                                        "default": null,
                                        "description": "Identifier of the parent page, if applicable.",
                                        "nullable": true,
                                        "title": "Page Id",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Type of the parent, e.g., \"page_id\" or \"block_id\".",
                                        "title": "Type",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "type"
                                ],
                                "title": "Parent",
                                "type": "object"
                            },
                            "rich_text": {
                                "description": "The content of the comment in rich text format.",
                                "items": {
                                    "properties": {
                                        "annotations": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "description": "Annotations for the text.",
                                            "title": "Annotations"
                                        },
                                        "href": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "description": "URL, if the text is a link.",
                                            "title": "Href"
                                        },
                                        "plain_text": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "description": "Plain text version of the content.",
                                            "title": "Plain Text"
                                        },
                                        "text": {
                                            "anyOf": [
                                                {
                                                    "type": "object"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "description": "Text content.",
                                            "title": "Text"
                                        },
                                        "type": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "null"
                                                }
                                            ],
                                            "default": null,
                                            "description": "Type of the rich text object.",
                                            "title": "Type"
                                        }
                                    },
                                    "title": "NotionRichText",
                                    "type": "object"
                                },
                                "title": "Rich Text",
                                "type": "array"
                            },
                            "type": {
                                "default": null,
                                "description": "Type of this object, should be \"comment\".",
                                "nullable": true,
                                "title": "Type",
                                "type": "string"
                            }
                        },
                        "required": [
                            "object",
                            "id",
                            "parent",
                            "discussion_id",
                            "created_time",
                            "last_edited_time",
                            "created_by",
                            "rich_text"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "RetrieveCommentResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "comment"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Retrieve Comment",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_RETRIEVE_DATABASE_PROPERTY",
            "name": "Retrieve Database Property",
            "description": "Tool to retrieve a specific property object of a notion database. use when you need to get details about a single database column/property.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "database_id": {
                        "description": "Identifier for the database.",
                        "examples": [
                            "a1b2c3d4-e5f6-7890-1234-abcdef123456"
                        ],
                        "title": "Database Id",
                        "type": "string"
                    },
                    "property_id": {
                        "description": "Identifier for the property. This can be the property ID or the property name.",
                        "examples": [
                            "title"
                        ],
                        "title": "Property Id",
                        "type": "string"
                    }
                },
                "required": [
                    "database_id",
                    "property_id"
                ],
                "title": "RetrieveDatabasePropertyRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "id": {
                                "description": "Identifier of the property.",
                                "title": "Id",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the property.",
                                "title": "Name",
                                "type": "string"
                            },
                            "property_type_details": {
                                "default": null,
                                "description": "Type-specific property configuration.",
                                "nullable": true,
                                "title": "Property Type Details",
                                "type": "object"
                            },
                            "type": {
                                "description": "Type of the property.",
                                "title": "Type",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "name",
                            "type"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "RetrieveDatabasePropertyResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "database",
                "property"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Retrieve Database Property",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_UPDATE_PAGE",
            "name": "Update Page",
            "description": "Tool to update the properties, icon, cover, or archive status of a page. use when you need to modify existing page attributes.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "archived": {
                        "default": null,
                        "description": "Set to true to archive the page (i.e., send to trash). Set to false to restore a page from trash. Defaults to false.",
                        "nullable": true,
                        "title": "Archived",
                        "type": "boolean"
                    },
                    "cover": {
                        "default": null,
                        "description": "A file object for the page cover. Only external file objects are supported for covers.",
                        "examples": [
                            {
                                "external": {
                                    "url": "https://example.com/cover.png"
                                },
                                "type": "external"
                            }
                        ],
                        "nullable": true,
                        "title": "Cover",
                        "type": "object"
                    },
                    "icon": {
                        "default": null,
                        "description": "A page icon object (either an emoji object or an external file object).",
                        "examples": [
                            {
                                "emoji": "🎉",
                                "type": "emoji"
                            }
                        ],
                        "nullable": true,
                        "title": "Icon",
                        "type": "object"
                    },
                    "page_id": {
                        "description": "Identifier for the Notion page to be updated.",
                        "examples": [
                            "59833787-2cf9-4fdf-8782-e53db20768a5"
                        ],
                        "title": "Page Id",
                        "type": "string"
                    },
                    "properties": {
                        "default": null,
                        "description": "An object containing the property values to update for the page. The keys are the names or IDs of the property and the values are property value objects. If a page property ID is not included, then it is not changed.",
                        "examples": [
                            {
                                "Name": {
                                    "title": [
                                        {
                                            "text": {
                                                "content": "New Page Title"
                                            }
                                        }
                                    ]
                                }
                            }
                        ],
                        "nullable": true,
                        "title": "Properties",
                        "type": "object"
                    }
                },
                "required": [
                    "page_id"
                ],
                "title": "UpdatePageRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "archived": {
                                "description": "Whether the page is archived.",
                                "title": "Archived",
                                "type": "boolean"
                            },
                            "cover": {
                                "default": null,
                                "description": "Page cover image, if any.",
                                "nullable": true,
                                "title": "Cover",
                                "type": "object"
                            },
                            "created_by": {
                                "description": "User who created the page.",
                                "title": "Created By",
                                "type": "object"
                            },
                            "created_time": {
                                "description": "Date and time when the page was created.",
                                "title": "Created Time",
                                "type": "string"
                            },
                            "icon": {
                                "default": null,
                                "description": "Page icon, if any.",
                                "nullable": true,
                                "title": "Icon",
                                "type": "object"
                            },
                            "id": {
                                "description": "Unique identifier for the page.",
                                "title": "Id",
                                "type": "string"
                            },
                            "last_edited_by": {
                                "description": "User who last edited the page.",
                                "title": "Last Edited By",
                                "type": "object"
                            },
                            "last_edited_time": {
                                "description": "Date and time when the page was last edited.",
                                "title": "Last Edited Time",
                                "type": "string"
                            },
                            "object": {
                                "description": "Type of object. Always \"page\" for page objects.",
                                "title": "Object",
                                "type": "string"
                            },
                            "parent": {
                                "description": "Information about the parent of this page.",
                                "title": "Parent",
                                "type": "object"
                            },
                            "properties": {
                                "description": "The page's properties.",
                                "title": "Properties",
                                "type": "object"
                            },
                            "public_url": {
                                "default": null,
                                "description": "The public URL of the Notion page, if it's shared publicly.",
                                "nullable": true,
                                "title": "Public Url",
                                "type": "string"
                            },
                            "url": {
                                "description": "The URL of the Notion page.",
                                "title": "Url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "object",
                            "id",
                            "created_time",
                            "last_edited_time",
                            "created_by",
                            "last_edited_by",
                            "parent",
                            "archived",
                            "properties",
                            "url"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "UpdatePageResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "page"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Update Page",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_UPDATE_ROW_DATABASE",
            "name": "Update row database",
            "description": "Updates or archives an existing notion database row (page) using its `row id`, allowing modification of its icon, cover, and/or properties; ensure the target page is accessible and property details (names/ids and values) align with the database schema and specified formats.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "cover": {
                        "default": null,
                        "description": "URL of an external image to be used as the cover for the page (e.g., 'https://google.com/image.png').",
                        "examples": [
                            "https://google.com/image.png"
                        ],
                        "title": "Cover",
                        "type": "string"
                    },
                    "delete_row": {
                        "default": false,
                        "description": "If true, the row (page) will be archived, effectively deleting it from the active view. If false, the row will be updated with other provided data.",
                        "examples": [
                            "True",
                            "False"
                        ],
                        "title": "Delete Row",
                        "type": "boolean"
                    },
                    "icon": {
                        "default": null,
                        "description": "The emoji to be used as the icon for the page. Must be a single emoji character (e.g., '😻', '🤔').",
                        "examples": [
                            "😻",
                            "🤔"
                        ],
                        "title": "Icon",
                        "type": "string"
                    },
                    "properties": {
                        "default": [],
                        "description": "A list of property values to update for the page. Each item in this list defines a specific property (by its name or ID) and the new value it should take. The format of the `value` depends on the property's type; refer to the main action documentation for detailed formatting guidelines. Properties not included in this list will retain their current values.",
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Name of the property",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of the property. Type of the propertytitle, rich_text, number, select, multi_select, date, people, files, checkbox url, email, phone_number, formula, created_by, created_time, last_edited_by, last_edited_time",
                                    "enum": [
                                        "title",
                                        "rich_text",
                                        "number",
                                        "select",
                                        "multi_select",
                                        "date",
                                        "people",
                                        "files",
                                        "checkbox",
                                        "url",
                                        "email",
                                        "phone_number",
                                        "formula",
                                        "relation",
                                        "rollup",
                                        "status",
                                        "created_time",
                                        "created_by",
                                        "last_edited_time",
                                        "last_edited_by"
                                    ],
                                    "title": "PropertyType",
                                    "type": "string"
                                },
                                "value": {
                                    "description": "Value of the property, it will be dependent on the type of the property\nFor types --> value should be\n- title, rich_text - text ex. \"Hello World\" (IMPORTANT: max 2000 characters, longer text will be truncated)\n- number - number ex. 23.4\n- select - select ex. \"India\"\n- multi_select - multi_select comma separated values ex. \"India,USA\"\n- date - format ex. \"2021-05-11T11:00:00.000-04:00\",\n- people - comma separated ids of people ex. \"123,456\" (will be converted to array of user objects)\n- relation - comma separated ids of related pages ex. \"123,456\" (will be converted to array of relation objects)\n- url - a url.\n- files - comma separated urls\n- checkbox - \"True\" or \"False\"\n",
                                    "title": "Value",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name",
                                "type",
                                "value"
                            ],
                            "title": "PropertyValues",
                            "type": "object"
                        },
                        "title": "Properties",
                        "type": "array"
                    },
                    "row_id": {
                        "description": "Identifier (UUID) of the database row (page) to be updated. This ID must be a valid UUID string (e.g., '59833787-2cf9-4fdf-8782-e53db20768a5') corresponding to an existing Notion page. In Notion, database rows are treated as pages.",
                        "examples": [
                            "59833787-2cf9-4fdf-8782-e53db20768a5"
                        ],
                        "title": "Row Id",
                        "type": "string"
                    }
                },
                "required": [
                    "row_id"
                ],
                "title": "UpdateRowDatabaseRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "description": "A dictionary containing the raw JSON response from the Notion API, representing the updated page object.",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "required": [
                            "response_data"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "UpdateRowDatabaseResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "update:pages"
            ],
            "tags": [
                "destructiveHint",
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Update row database",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_UPDATE_SCHEMA_DATABASE",
            "name": "Update database schema",
            "description": "Updates an existing notion database's title, description, and/or properties; at least one of these attributes must be provided to effect a change.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "database_id": {
                        "description": "Identifier of the Notion database to update. Use the `NOTION_FETCH_DATA` action or similar tools to get available database IDs and their titles.",
                        "examples": [
                            "d9824bdc-8445-4327-be8b-554d41f30b60"
                        ],
                        "title": "Database Id",
                        "type": "string"
                    },
                    "description": {
                        "default": null,
                        "description": "New description for the database. If this field is not provided or is set to `None` (the default value), the database's existing description will remain unchanged.",
                        "title": "Description",
                        "type": "string"
                    },
                    "properties": {
                        "default": [],
                        "description": "List of property updates. Each item must include at least the 'name' of the column to change plus one of: 'new_type', 'rename', or 'remove'. Example:\n[\n  {'name': 'Status', 'new_type': 'select'},\n  {'name': 'Priority', 'remove': true}\n]",
                        "examples": [
                            [
                                {
                                    "name": "Status",
                                    "new_type": "select"
                                },
                                {
                                    "name": "Priority",
                                    "remove": true
                                }
                            ]
                        ],
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Name of the property",
                                    "title": "Name",
                                    "type": "string"
                                },
                                "new_type": {
                                    "default": null,
                                    "description": "Default is None, If None the type remains the same. New Type of the property title, rich_text, number, select, multi_select, date, people, files, checkbox url, email, phone_number, formula, created_by, created_time, last_edited_by, last_edited_time",
                                    "title": "New Type",
                                    "type": "string"
                                },
                                "remove": {
                                    "default": false,
                                    "description": "Remove the property",
                                    "title": "Remove",
                                    "type": "boolean"
                                },
                                "rename": {
                                    "default": null,
                                    "description": "New name of the property, default is None. If None, the name remains the same.",
                                    "title": "Rename",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "name"
                            ],
                            "title": "PropertySchemaUpdate",
                            "type": "object"
                        },
                        "title": "Properties",
                        "type": "array"
                    },
                    "title": {
                        "default": null,
                        "description": "New title for the database. If this field is not provided or is set to `None` (the default value), the database's existing title will remain unchanged.",
                        "title": "Title",
                        "type": "string"
                    }
                },
                "required": [
                    "database_id"
                ],
                "title": "UpdateSchemaDatabaseRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "description": "The full JSON response from the Notion API after attempting to update the database, containing the updated database object representation.",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "required": [
                            "response_data"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "UpdateSchemaDatabaseResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "important",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Update database schema",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_APPEND_BLOCK_CHILDREN",
            "name": "Append block children",
            "description": "Appends new child blocks to a specified parent block or page in notion, ideal for adding content within an existing structure (e.g., list items, toggle content) rather than creating new pages; the parent must be able to accept children.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "description": "Request model for appending child blocks to an existing block.",
                "properties": {
                    "after": {
                        "default": null,
                        "description": "An optional ID of an existing child block. If provided, the new blocks will be inserted directly after this specified block. If omitted, new blocks are appended to the end of the parent's children list.",
                        "examples": [
                            "9bc30ad4-9373-46a5-84ab-0a7845ee52e6"
                        ],
                        "nullable": true,
                        "title": "After",
                        "type": "string"
                    },
                    "block_id": {
                        "description": "Identifier of the parent block or page to which new child blocks will be appended. To find available page IDs and their titles, the `NOTION_FETCH_DATA` action can be utilized.",
                        "examples": [
                            "b55c9c91-384d-452b-81db-d1ef79372b75"
                        ],
                        "title": "Block Id",
                        "type": "string"
                    },
                    "children": {
                        "description": "A list of block objects to be added as children to the parent block. Each block object must conform to Notion's block structure. A maximum of 100 blocks can be appended in a single request.",
                        "examples": [
                            "[{\"object\": \"block\", \"type\": \"heading_2\", \"heading_2\": {\"rich_text\": [{\"text\": {\"content\": \"Lacinato kale\"}}]}}]"
                        ],
                        "items": {
                            "type": "object"
                        },
                        "title": "Children",
                        "type": "array"
                    }
                },
                "required": [
                    "block_id",
                    "children"
                ],
                "title": "AppendBlockChildrenRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "has_more": {
                                "default": false,
                                "description": "A boolean flag indicating whether more results are available (true) or if all results have been returned (false).",
                                "title": "Has More",
                                "type": "boolean"
                            },
                            "next_cursor": {
                                "default": null,
                                "description": "If `has_more` is true, this field contains the cursor to use in a subsequent request to retrieve the next page of results. Otherwise, it is `null`.",
                                "nullable": true,
                                "title": "Next Cursor",
                                "type": "string"
                            },
                            "object": {
                                "default": "list",
                                "description": "Indicates the type of the response object, typically 'list' for this operation, signifying a list of block objects.",
                                "title": "Object",
                                "type": "string"
                            },
                            "results": {
                                "description": "A list containing the newly created block objects that were successfully appended.",
                                "items": {
                                    "type": "object"
                                },
                                "title": "Results",
                                "type": "array"
                            }
                        },
                        "required": [
                            "results"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "AppendBlockChildrenResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Append block children",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_ARCHIVE_NOTION_PAGE",
            "name": "Archive Notion Page",
            "description": "Archives (moves to trash) or unarchives (restores from trash) a specified notion page.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "archive": {
                        "default": true,
                        "description": "Set to `true` to move the page to trash (archive), or `false` to restore it from trash (unarchive). Defaults to `true`.",
                        "title": "Archive",
                        "type": "boolean"
                    },
                    "page_id": {
                        "description": "The unique identifier (UUID) of the Notion page to be archived or unarchived. This page must already exist in the Notion workspace. Page IDs can be obtained using other Notion actions that retrieve or search for pages.",
                        "examples": [
                            "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                        ],
                        "title": "Page Id",
                        "type": "string"
                    }
                },
                "required": [
                    "page_id"
                ],
                "title": "ArchiveNotionPageRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Represents the updated Notion page object, reflecting its new archive status with the `in_trash` property updated.",
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "ArchiveNotionPageResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "Read content"
            ],
            "tags": [
                "destructiveHint",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Archive Notion Page",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_DUPLICATE_PAGE",
            "name": "Duplicate page",
            "description": "Duplicates a notion page, including all its content, properties, and nested blocks, under a specified parent page or workspace.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "description": "Defines the parameters for duplicating a Notion page.",
                "properties": {
                    "page_id": {
                        "description": "The unique identifier (UUID v4) of the Notion page to be duplicated. Ensure this page exists and is accessible.",
                        "examples": [
                            "2e22de6b-770e-4166-be30-1490f6ffd7c1"
                        ],
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                        "title": "Page Id",
                        "type": "string"
                    },
                    "parent_id": {
                        "description": "The unique identifier (UUID v4) of the Notion page or workspace that will serve as the parent for the duplicated page. Ensure this parent exists and is accessible. This ID cannot be the same as `page_id`.",
                        "examples": [
                            "7e22de6b-770e-4166-be30-1490f6ffd7c1"
                        ],
                        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                        "title": "Parent Id",
                        "type": "string"
                    },
                    "title": {
                        "default": null,
                        "description": "An optional new title for the duplicated page. If not provided, the title of the original page will be used, prefixed with 'Copy of'.",
                        "examples": [
                            "My Duplicated Page",
                            "Project Plan - Q3 Copy"
                        ],
                        "nullable": true,
                        "title": "Title",
                        "type": "string"
                    }
                },
                "required": [
                    "page_id",
                    "parent_id"
                ],
                "title": "DuplicatePageRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "page_id": {
                                "description": "The unique identifier (UUID v4) of the newly created duplicate page.",
                                "title": "Page Id",
                                "type": "string"
                            },
                            "title": {
                                "description": "The title of the newly created duplicate page. This will be the user-provided title or the original title prefixed with 'Copy of'.",
                                "title": "Title",
                                "type": "string"
                            },
                            "url": {
                                "description": "The direct URL to access the newly created duplicate page in Notion.",
                                "title": "Url",
                                "type": "string"
                            }
                        },
                        "required": [
                            "page_id",
                            "url",
                            "title"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "DuplicatePageResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Duplicate page",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_FETCH_NOTION_BLOCK",
            "name": "Fetch Notion block",
            "description": "Retrieves a notion block (or page, as pages are blocks) using its valid uuid; if the block has children, use a separate action to fetch them.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "block_id": {
                        "description": "The unique UUID identifier for the Notion block to be retrieved. This can be the ID of a standard block or a page. To find block or page IDs, you might use actions that list page content or search for blocks/pages.",
                        "examples": [
                            "c02fc1d3-db8b-45c5-a222-27595b15aea7"
                        ],
                        "format": "uuid",
                        "title": "Block Id",
                        "type": "string"
                    }
                },
                "required": [
                    "block_id"
                ],
                "title": "FetchNotionBlockRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "description": "A dictionary representing the JSON response for the fetched Notion block object. The structure of this dictionary conforms to Notion's official Block object schema.",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "required": [
                            "response_data"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "FetchNotionBlockResponseWrapper",
                "type": "object"
            },
            "scopes": [],
            "tags": [
                "readOnlyHint",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Fetch Notion block",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_FETCH_NOTION_CHILD_BLOCK",
            "name": "Fetch Notion Block Children",
            "description": "Retrieves a paginated list of direct, first-level child block objects for a given parent notion block or page id; use block ids from the response for subsequent calls to access deeply nested content.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "block_id": {
                        "description": "Identifier (UUID) of the parent Notion block or page whose children are to be fetched. This ID can be for a block or a page (as pages are blocks). To obtain relevant IDs and their titles, consider using actions like 'NOTION_FETCH_DATA' or other actions that list pages or database content.",
                        "examples": [
                            "c02fc1d3-db8b-45c5-a222-27595b15aea7"
                        ],
                        "format": "uuid",
                        "title": "Block Id",
                        "type": "string"
                    },
                    "page_size": {
                        "default": null,
                        "description": "The maximum number of child blocks to return in a single response. The actual number of results may be lower if there are fewer child blocks available or if the end of the list is reached. Maximum allowed value is 100. If unspecified, Notion's default page size will be used.",
                        "examples": [
                            "25",
                            "50",
                            "100"
                        ],
                        "nullable": true,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "start_cursor": {
                        "default": null,
                        "description": "An opaque string. If provided, the response will list blocks starting from the position indicated by this cursor. If omitted, the first page of results is returned. Essential for paginating through a large number of child blocks.",
                        "examples": [
                            "some_opaque_cursor_string_abc_123"
                        ],
                        "nullable": true,
                        "title": "Start Cursor",
                        "type": "string"
                    }
                },
                "required": [
                    "block_id"
                ],
                "title": "FetchNotionBlockChildRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "block_child_data": {
                                "default": null,
                                "description": "A dictionary representing the API response, typically containing a 'results' key with a list of child block objects, and pagination details like 'next_cursor' and 'has_more'. Each object in the 'results' list is a direct child of the specified parent block.",
                                "title": "Block Child Data",
                                "type": "object"
                            }
                        },
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "FetchNotionBlockChildResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "read:content"
            ],
            "tags": [
                "readOnlyHint",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Fetch Notion Block Children",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_GET_PAGE_PROPERTY_ACTION",
            "name": "Get page property",
            "description": "Call this to get a specific property from a notion page when you have a valid `page id` and `property id`; handles pagination for properties returning multiple items.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "description": "Request model for retrieving a specific property from a Notion page.",
                "properties": {
                    "page_id": {
                        "description": "Identifier of the Notion page (e.g., '067dd719-a912-471e-a9a3-ac10710e78b4') from which to retrieve the property. Use the 'NOTION_FETCH_DATA' action or similar to discover available page IDs and their titles.",
                        "examples": [
                            "067dd719-a912-471e-a9a3-ac10710e78b4",
                            "c4f15f71-7a21-4c8e-87e5-93b9e3c7e247"
                        ],
                        "pattern": "^[a-zA-Z0-9-]+$",
                        "title": "Page Id",
                        "type": "string"
                    },
                    "page_size": {
                        "default": null,
                        "description": "For paginated property types (e.g., 'relation', 'rollup', 'rich_text' if content is extensive), this specifies the number of items to return per request. If omitted, Notion's default page size for the property is used.",
                        "maximum": 100,
                        "minimum": 1,
                        "nullable": true,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "property_id": {
                        "description": "Identifier or name of the property to retrieve. For 'title' properties, the ID is always 'title'. For other properties, this can be the property's name as displayed in Notion (e.g., 'Status', 'Assignee') or its unique programmatic ID (e.g., 'N%3A%5B%7C', 'prop_id_example'). Property IDs/names can be found by inspecting the page object or database schema.",
                        "examples": [
                            "title",
                            "Status",
                            "Due Date",
                            "assignee_prop_id",
                            "N%3A%5B%7C"
                        ],
                        "title": "Property Id",
                        "type": "string"
                    },
                    "start_cursor": {
                        "default": null,
                        "description": "For paginated properties, if a previous request's response indicated `has_more: true`, provide the `next_cursor` value here to fetch the subsequent set of items. Omit if fetching the first page.",
                        "nullable": true,
                        "title": "Start Cursor",
                        "type": "string"
                    }
                },
                "required": [
                    "page_id",
                    "property_id"
                ],
                "title": "GetPagePropertyRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "has_more": {
                                "default": null,
                                "description": "If `object` is 'list', this boolean indicates if more items are available for the paginated property. True if more items can be fetched using `next_cursor`, false otherwise. Absent if `object` is 'property_item'.",
                                "nullable": true,
                                "title": "Has More",
                                "type": "boolean"
                            },
                            "next_cursor": {
                                "default": null,
                                "description": "If `object` is 'list' and `has_more` is true, this string is a cursor for fetching the next page of results. Pass this as `start_cursor` in a subsequent request. Null if no more results or if `object` is 'property_item'.",
                                "nullable": true,
                                "title": "Next Cursor",
                                "type": "string"
                            },
                            "object": {
                                "description": "Indicates the type of the response object. Will be 'property_item' if the property's value and type are returned directly, or 'list' if the property is paginated (e.g., a list of rich text segments, users, files, or related page references), in which case `results` will contain the items.",
                                "title": "Object",
                                "type": "string"
                            },
                            "results": {
                                "default": null,
                                "description": "If `object` is 'list', this array contains the property items for the current page (e.g., for a 'rich_text' property, a list of text objects; for a 'relation', a list of related page references). This field is absent if `object` is 'property_item'.",
                                "items": {},
                                "nullable": true,
                                "title": "Results",
                                "type": "array"
                            },
                            "type": {
                                "default": null,
                                "description": "If `object` is 'property_item', this field indicates the type of the property (e.g., 'rich_text', 'number', 'select', 'date', 'people', 'files', 'checkbox', 'url', 'email', 'status', 'title'). This field is absent if `object` is 'list'.",
                                "nullable": true,
                                "title": "Type",
                                "type": "string"
                            }
                        },
                        "required": [
                            "object"
                        ],
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "GetPagePropertyResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "read"
            ],
            "tags": [
                "readOnlyHint",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Get page property",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_NOTION_UPDATE_BLOCK",
            "name": "Update block",
            "description": "Updates an existing notion block's textual content or type-specific properties (e.g., 'checked' status, 'color'), using its `block id` and the specified `block type`.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "description": "Input parameters for updating a Notion block.",
                "properties": {
                    "additional_properties": {
                        "default": null,
                        "description": "A dictionary of additional properties to apply to the block, specific to its type. These are merged into the block type's data object (e.g., into the 'paragraph' or 'to_do' object). Examples include `is_toggleable` (boolean) for heading blocks, `checked` (boolean) for 'to_do' blocks, or `color` (string, e.g., 'blue_background') for blocks supporting it. Consult Notion API documentation for supported properties within each block type object.",
                        "examples": [
                            "{\"checked\": true}",
                            "{\"color\": \"blue_background\"}",
                            "{\"is_toggleable\": true, \"color\": \"gray\"}"
                        ],
                        "nullable": true,
                        "title": "Additional Properties",
                        "type": "object"
                    },
                    "block_id": {
                        "description": "Identifier of the Notion block to be updated. To find a block's ID, other Notion actions that list or retrieve blocks can be used. For updating content within a page (which is also a block), its ID can be obtained using actions like `NOTION_FETCH_DATA` to get page IDs and titles.",
                        "examples": [
                            "a1b2c3d4-e5f6-7890-1234-567890abcdef"
                        ],
                        "title": "Block Id",
                        "type": "string"
                    },
                    "block_type": {
                        "description": "The type of the block to update. Must be one of the supported types: 'paragraph', 'heading_1', 'heading_2', 'heading_3', 'bulleted_list_item', 'numbered_list_item', 'to_do', 'toggle'. The content structure and available `additional_properties` depend on this type.",
                        "examples": [
                            "paragraph",
                            "to_do",
                            "heading_2"
                        ],
                        "title": "Block Type",
                        "type": "string"
                    },
                    "content": {
                        "description": "The new text content for the block. This is primarily used for text-based blocks like paragraphs, headings, and list items.",
                        "examples": [
                            "This is the updated line of text."
                        ],
                        "title": "Content",
                        "type": "string"
                    }
                },
                "required": [
                    "block_id",
                    "block_type",
                    "content"
                ],
                "title": "UpdateBlockRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "A dictionary representing the updated Notion block object, conforming to the Notion API's block object structure.",
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "UpdateBlockResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "update content"
            ],
            "tags": [
                "destructiveHint",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Update block",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        },
        {
            "slug": "NOTION_SEARCH_NOTION_PAGE",
            "name": "Search Notion page",
            "description": "Searches notion pages and databases by title; an empty query lists all accessible items, useful for discovering ids or as a fallback when a specific query yields no results.",
            "available_versions": [
                "0_1",
                "latest",
                "latest:base"
            ],
            "version": "0_1",
            "toolkit": {
                "slug": "notion",
                "name": "notion",
                "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
            },
            "input_parameters": {
                "properties": {
                    "direction": {
                        "default": null,
                        "description": "Specifies the sort direction for the results. Required if `timestamp` is provided. Valid values are `ascending` or `descending`.",
                        "examples": [
                            "ascending",
                            "descending"
                        ],
                        "nullable": true,
                        "title": "Direction",
                        "type": "string"
                    },
                    "filter_property": {
                        "default": "object",
                        "description": "The property to filter the search results by. Currently, the only supported value is `object`, which filters by the type specified in `filter_value`. Defaults to `object`.",
                        "examples": [
                            "object"
                        ],
                        "title": "Filter Property",
                        "type": "string"
                    },
                    "filter_value": {
                        "default": "page",
                        "description": "Filters the search results by object type. Valid values are `page` or `database`. Defaults to `page`.",
                        "examples": [
                            "page",
                            "database"
                        ],
                        "nullable": true,
                        "title": "Filter Value",
                        "type": "string"
                    },
                    "page_size": {
                        "default": 2,
                        "description": "The number of items to include in the response. Must be an integer between 1 and 100, inclusive. Defaults to 2.",
                        "maximum": 100,
                        "minimum": 1,
                        "nullable": true,
                        "title": "Page Size",
                        "type": "integer"
                    },
                    "query": {
                        "default": "",
                        "description": "The text to search for in page and database titles. If an empty string is provided, all pages and databases accessible to the integration will be returned.",
                        "title": "Query",
                        "type": "string"
                    },
                    "start_cursor": {
                        "default": null,
                        "description": "An opaque cursor value returned in a previous response. If provided, the API will return results starting after this cursor, enabling pagination. If `None` or an empty string, results start from the beginning.",
                        "nullable": true,
                        "title": "Start Cursor",
                        "type": "string"
                    },
                    "timestamp": {
                        "default": null,
                        "description": "The timestamp field to sort the results by. Currently, the only supported value is `last_edited_time`. If provided, `direction` must also be specified.",
                        "nullable": true,
                        "title": "Timestamp",
                        "type": "string"
                    }
                },
                "title": "SearchNotionPageRequest",
                "type": "object"
            },
            "output_parameters": {
                "properties": {
                    "data": {
                        "description": "Data from the action execution",
                        "properties": {
                            "response_data": {
                                "default": {},
                                "description": "A dictionary containing the raw JSON response from the Notion API, which includes a list of page or database objects, and potentially a `next_cursor` for pagination.",
                                "title": "Response Data",
                                "type": "object"
                            }
                        },
                        "title": "Data",
                        "type": "object"
                    },
                    "error": {
                        "default": null,
                        "description": "Error if any occurred during the execution of the action",
                        "nullable": true,
                        "title": "Error",
                        "type": "string"
                    },
                    "successful": {
                        "description": "Whether or not the action execution was successful or not",
                        "title": "Successful",
                        "type": "boolean"
                    }
                },
                "required": [
                    "data",
                    "successful"
                ],
                "title": "SearchNotionPageResponseWrapper",
                "type": "object"
            },
            "scopes": [
                "read content"
            ],
            "tags": [
                "readOnlyHint",
                "openWorldHint"
            ],
            "no_auth": false,
            "deprecated": {
                "displayName": "Search Notion page",
                "version": "0_1",
                "available_versions": [
                    "0_1",
                    "latest",
                    "latest:base"
                ],
                "is_deprecated": false,
                "toolkit": {
                    "logo": "https://cdn.jsdelivr.net/gh/ComposioHQ/open-logos@master/notion.svg"
                }
            }
        }
    ],
    "next_cursor": null,
    "total_pages": 1,
    "current_page": 1,
    "total_items": 27
}